workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

variables:
  DOCKER_REV: efc1ab81236eb37e20cb287ec77aebb6c6341098
  GIT_DEPTH: 1
  GIT_STRATEGY: clone

.x86_64-linux-alpine:
  tags:
    - x86_64-linux
  image: registry.gitlab.haskell.org/ghc/ci-images/x86_64-linux-alpine3_18:$DOCKER_REV
  before_script:
    - |
      pushd "$(mktemp -d)"
      sudo curl -f -L --retry 5 https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub
      sudo curl -f -L --retry 5 https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk -O
      sudo curl -f -L --retry 5 https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk -O
      sudo apk add --force-overwrite glibc-2.34-r0.apk
      sudo apk add --force-overwrite glibc-bin-2.34-r0.apk
      sudo apk fix --force-overwrite alpine-baselayout-data
      popd
    - sudo chown ghc:ghc -R .
  script:
    - |
      PREFIX=/tmp/.ghc-wasm ./setup.sh
      . /tmp/.ghc-wasm/env

      pushd "$(mktemp -d)"
      echo "import System.Environment.Blank" >> hello.hs
      echo 'main = print =<< getArgs' >> hello.hs
      wasm32-wasi-ghc hello.hs -o hello.wasm
      $CROSS_EMULATOR ./hello.wasm "114 514" 233
      wasm-run ./hello.wasm "114 514" 233
      wasmtime run ./hello.wasm "114 514" 233
      bun run ./hello.wasm "114 514" 233
      # wasmedge run -- ./hello.wasm "114 514" 233
      wazero run ./hello.wasm -- "114 514" 233
      popd

x86_64-linux-alpine-gmp:
  extends: .x86_64-linux-alpine
  variables:
    FLAVOUR: gmp

x86_64-linux-alpine-native:
  extends: .x86_64-linux-alpine
  variables:
    FLAVOUR: native

x86_64-linux-alpine-unreg:
  extends: .x86_64-linux-alpine
  variables:
    FLAVOUR: unreg

x86_64-linux-alpine-9.6:
  extends: .x86_64-linux-alpine
  variables:
    FLAVOUR: "9.6"

x86_64-linux-alpine-9.8:
  extends: .x86_64-linux-alpine
  variables:
    FLAVOUR: "9.8"

x86_64-linux-alpine-9.10:
  extends: .x86_64-linux-alpine
  variables:
    FLAVOUR: "9.10"

x86_64-linux-alpine-9.12:
  extends: .x86_64-linux-alpine
  variables:
    FLAVOUR: "9.12"

x86_64-linux-ubuntu:
  allow_failure: true # TODO: colour-2.3.6 regression in HEAD
  tags:
    - x86_64-linux
  image: registry.gitlab.haskell.org/ghc/ci-images/x86_64-linux-ubuntu24_04:$DOCKER_REV
  before_script:
    - |
      sudo apt update
      sudo apt install -y \
        zstd
    - sudo chown ghc:ghc -R .
  script:
    - |
      PREFIX=/tmp/.ghc-wasm ./setup.sh
      . /tmp/.ghc-wasm/env
    - |
      pushd "$(mktemp -d)"
      curl -f -L --retry 5 https://github.com/haskell/time/archive/refs/heads/master.tar.gz | tar xz --strip-components=1
      sed -i '/tasty/d' time.cabal
      echo "package QuickCheck" >> cabal.project.local
      echo "  flags: -templatehaskell" >> cabal.project.local
      echo "allow-newer: all:base, all:deepseq" >> cabal.project.local
      autoreconf -i
      wasm32-wasi-cabal build test:ShowDefaultTZAbbreviations
      wasmtime run $(wasm32-wasi-cabal list-bin test:ShowDefaultTZAbbreviations)
      wasm32-wasi-cabal build test:ShowTime
      wasmtime run $(wasm32-wasi-cabal list-bin test:ShowTime)
      popd
    - |
      pushd "$(mktemp -d)"
      curl -f -L --retry 5 https://github.com/haskell/unix/archive/refs/heads/master.tar.gz | tar xz --strip-components=1
      cp /tmp/.ghc-wasm/wasi-sdk/share/misc/config.* .
      autoreconf -i
      wasm32-wasi-cabal --project-file=cabal.project.wasm32-wasi build
      ./test-wasm32-wasi.mjs
      popd
    - |
      pushd "$(mktemp -d)"
      curl -f -L --retry 5 https://github.com/corsis/clock/archive/refs/heads/master.tar.gz | tar xz --strip-components=1
      wasm32-wasi-cabal build
      popd
    - |
      pushd "$(mktemp -d)"
      curl -f -L --retry 5 https://github.com/haskell/zlib/archive/refs/heads/master.tar.gz | tar xz --strip-components=1
      mv cabal.project.wasi cabal.project.local
      wasm32-wasi-cabal build --allow-newer=all:base --enable-tests all
      cd zlib
      $CROSS_EMULATOR $(find .. -type f -name tests.wasm)
      popd
    - |
      pushd "$(mktemp -d)"
      curl -f -L --retry 5 https://github.com/Bodigrim/bitvec/archive/refs/heads/master.tar.gz | tar xz --strip-components=1
      mv cabal.project.wasi cabal.project.local
      wasm32-wasi-cabal build --enable-tests
      $CROSS_EMULATOR $(find . -type f -name bitvec-tests.wasm)
      popd
    - |
      pushd "$(mktemp -d)"
      curl -f -L --retry 5 https://github.com/UnkindPartition/tasty/archive/refs/heads/master.tar.gz | tar xz --strip-components=1
      echo "allow-newer: all:base, all:deepseq, all:template-haskell" >> cabal.project.local
      wasm32-wasi-cabal build all

      readonly TEST_WRAPPERS="$(mktemp -d -p /tmp)"
      export PATH=$TEST_WRAPPERS:$PATH
      wasm32-wasi-cabal install ./core-tests
      for test in tasty-core-tests exit-status-test resource-release-test failing-pattern-test; do
        echo '#!/bin/sh' > "$TEST_WRAPPERS/$test"
        echo "exec $CROSS_EMULATOR /tmp/.ghc-wasm/.cabal/bin/$test.wasm \"\$@\"" \
          >> "$TEST_WRAPPERS/$test"
        chmod +x "$TEST_WRAPPERS/$test"
      done

      (cd core-tests && tasty-core-tests)
      core-tests/exit-status-tests.sh
      core-tests/failing-pattern-test.sh

      popd
    - |
      pushd "$(mktemp -d)"
      curl -f -L --retry 5 https://github.com/Bodigrim/tasty-bench/archive/refs/heads/master.tar.gz | tar xz --strip-components=1
      wasm32-wasi-cabal build --enable-benchmarks
      $CROSS_EMULATOR $(find . -type f -name bench-fibo.wasm)
      popd
    - |
      pushd "$(mktemp -d)"
      curl -f -L --retry 5 https://github.com/extism/haskell-pdk/archive/refs/heads/main.tar.gz | tar xz --strip-components=1
      wasm32-wasi-cabal build all
      popd
    - |
      pushd "$(mktemp -d)"
      curl -f -L --retry 5 https://github.com/AntanasKal/SpaceInvaders/archive/refs/heads/develop.tar.gz | tar xz --strip-components=1
      echo "allow-newer: all:deepseq" >> cabal.project.local
      wasm32-wasi-cabal build wasmBuild
      popd
    - |
      npm install -g \
        sass
    - |
      pushd "$(mktemp -d)"
      curl -f -L --retry 5 https://github.com/tweag/ghc-wasm-miso-examples/archive/refs/heads/main.tar.gz | tar xz --strip-components=1
      cd frontend
      ./build.sh
      popd

x86_64-linux-nix:
  tags:
    - x86_64-linux
  image: nixos/nix:2.24.10
  before_script:
    - echo "experimental-features = nix-command flakes" >> /etc/nix/nix.conf
    - nix run nixpkgs#gnused -- -i -e 's/ nixbld//' /etc/nix/nix.conf
  script:
    - |
      nix build --json --no-link . .#all_native .#all_unreg .#all_9_6 .#all_9_8 .#all_9_10 .#all_9_12
